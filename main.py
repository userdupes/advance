import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
import threading
import time
from datetime import datetime
import re
import logging
import json
import os
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7967816394:AAEVj9sdT0JCfxOBtV3igi7AMc2eEFE7Tdk"
ADMIN_ID = 6532749214  # –í–∞—à ID (—É–∑–Ω–∞—Ç—å —É @userinfobot)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_chats = {}  # {chat_id: {"mode": str, "interval": int, "is_spamming": bool, "message": str, "schedule": dict}}
pending_invites = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
join_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é —Å—Å—ã–ª–æ–∫
bot_instance = None

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤
CHATS_FILE = "saved_chats.json"

# –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
AD_MESSAGE = "üì£ –•–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —á–∞—Ç–∞–º? –ü–∏—à–∏ - @advcreator"

def save_chats():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    try:
        chats_to_save = {}
        for chat_id, settings in active_chats.items():
            chats_to_save[str(chat_id)] = {
                'mode': settings['mode'],
                'interval': settings['interval'],
                'is_spamming': False,
                'message': settings['message'],
                'schedule': settings['schedule']
            }

        with open(CHATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(chats_to_save, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(chats_to_save)} —á–∞—Ç–æ–≤ –≤ {CHATS_FILE}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {e}")

def load_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    global active_chats
    try:
        if os.path.exists(CHATS_FILE):
            with open(CHATS_FILE, 'r', encoding='utf-8') as f:
                saved_chats = json.load(f)

            for chat_id_str, settings in saved_chats.items():
                chat_id = int(chat_id_str)
                active_chats[chat_id] = settings

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(active_chats)} —á–∞—Ç–æ–≤ –∏–∑ {CHATS_FILE}")
        else:
            logger.info("üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤: {e}")
        active_chats = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏", callback_data='chat_list')],
        [InlineKeyboardButton("‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data='quick_commands')],
        [InlineKeyboardButton("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã", callback_data='schedule_menu')],
        [InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ", callback_data='add_chat_link')]
    ])

async def chat_list_keyboard():
    keyboard = []
    for chat_id in active_chats:
        try:
            chat = await bot_instance.get_chat(chat_id)
            btn_text = f"{chat.title or '–õ–°'} ({'üöÄ' if active_chats[chat_id]['mode'] == 'turbo' else 'ü•∑'} {active_chats[chat_id]['interval']}s)"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f'chat_{chat_id}')])
        except:
            pass
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')])
    return InlineKeyboardMarkup(keyboard)

def chat_settings_keyboard(chat_id):
    mode = active_chats[chat_id]['mode']
    intervals = [1, 5] if mode == 'turbo' else [10, 30, 60]

    interval_buttons = []
    for i in intervals:
        interval_buttons.append(
            InlineKeyboardButton(
                f"{'üîµ' if active_chats[chat_id]['interval'] == i else '‚ö™'} {i}s",
                callback_data=f'setinterval_{chat_id}_{i}'
            )
        )

    schedule_status = "üü¢" if active_chats[chat_id]['schedule']['enabled'] else "üî¥"

    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"‚úâ: {active_chats[chat_id]['message'][:15]}...", callback_data=f'setmsg_{chat_id}')],
        [InlineKeyboardButton(f"–†–µ–∂–∏–º: {'üöÄ Turbo' if mode == 'turbo' else 'ü•∑ Stealth'}", callback_data=f'togglemode_{chat_id}')],
        interval_buttons,
        [InlineKeyboardButton(f"{schedule_status} –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {active_chats[chat_id]['schedule']['start']}-{active_chats[chat_id]['schedule']['end']}", callback_data=f'schedule_{chat_id}')],
        [InlineKeyboardButton("üü¢ –í–ö–õ" if not active_chats[chat_id]['is_spamming'] else "üî¥ –í–´–ö–õ", callback_data=f'togglespam_{chat_id}')],
        [InlineKeyboardButton("‚ùå –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç", callback_data=f'leave_chat_{chat_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='chat_list')]
    ])

def quick_commands_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –¢—É—Ä–±–æ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö", callback_data='turbo_all')],
        [InlineKeyboardButton("ü•∑ –°–∫—Ä—ã—Ç—ã–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö", callback_data='stealth_all')],
        [InlineKeyboardButton("‚ñ∂ –°—Ç–∞—Ä—Ç –≤–µ–∑–¥–µ", callback_data='start_all')],
        [InlineKeyboardButton("‚èπ –°—Ç–æ–ø –≤–µ–∑–¥–µ", callback_data='stop_all')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
    ])

def convert_image_to_jpeg(image_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram"""
    try:
        with Image.open(image_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ
            if img.mode != 'RGB':
                img = img.convert('RGB')

            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            max_size = (1280, 1280)
            img.thumbnail(max_size, Image.Resampling.LANCZOS)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∫ JPEG
            buffer = io.BytesIO()
            img.save(buffer, format='JPEG', quality=85, optimize=True)
            buffer.seek(0)
            return buffer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def schedule_keyboard(chat_id=None):
    if chat_id:
        schedule = active_chats[chat_id]['schedule']
        return InlineKeyboardMarkup([
            [InlineKeyboardButton(f"–ù–∞—á–∞–ª–æ: {schedule['start']}", callback_data=f'set_start_{chat_id}')],
            [InlineKeyboardButton(f"–ö–æ–Ω–µ—Ü: {schedule['end']}", callback_data=f'set_end_{chat_id}')],
            [InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'enable_schedule_{chat_id}')],
            [InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'disable_schedule_{chat_id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'chat_{chat_id}')]
        ])
    else:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
        ])

async def send_ad_to_non_admins(update: Update):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.effective_user.id != ADMIN_ID:
        try:
            await update.message.reply_text(AD_MESSAGE)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}: {e}")

async def process_invites():
    global bot_instance
    while True:
        try:
            with join_lock:
                if pending_invites:
                    invite_link = pending_invites.pop(0)
                    try:
                        chat = await bot_instance.get_chat(invite_link)

                        if chat.id not in active_chats:
                            try:
                                await bot_instance.join_chat(invite_link)
                            except Exception as join_error:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É {invite_link}: {join_error}")
                                pass

                            active_chats[chat.id] = {
                                'mode': 'stealth',
                                'interval': 10,
                                'is_spamming': False,
                                'message': f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat.title or chat.id}",
                                'schedule': {
                                    'start': '09:00',
                                    'end': '18:00',
                                    'enabled': False
                                }
                            }
                            save_chats()

                            quick_manage_keyboard = InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚öô –£–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —á–∞—Ç–æ–º", callback_data=f'chat_{chat.id}')],
                                [InlineKeyboardButton("üìã –í—Å–µ —á–∞—Ç—ã", callback_data='chat_list')],
                                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
                            ])

                            await bot_instance.send_message(
                                chat_id=ADMIN_ID,
                                text=f"ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!\n\n"
                                     f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                                     f"üÜî ID: {chat.id}\n"
                                     f"üîó –°—Å—ã–ª–∫–∞: {invite_link}\n\n"
                                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                reply_markup=quick_manage_keyboard
                            )
                    except Exception as e:
                        await bot_instance.send_message(
                            chat_id=ADMIN_ID,
                            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {invite_link}:\n{str(e)}\n\n"
                                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:\n"
                                 "1. –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞\n"
                                 "2. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n"
                                 "3. –ß–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é)"
                        )
            await asyncio.sleep(5)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_invites: {e}")
            await asyncio.sleep(10)

async def check_schedule():
    global bot_instance
    while True:
        try:
            now = datetime.now().strftime("%H:%M")
            for chat_id, settings in active_chats.items():
                if settings['schedule']['enabled']:
                    start = settings['schedule']['start']
                    end = settings['schedule']['end']

                    if start <= now < end and not settings['is_spamming']:
                        settings['is_spamming'] = True
                        asyncio.create_task(send_spam_messages(chat_id))
                        await bot_instance.send_message(
                            chat_id=ADMIN_ID,
                            text=f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤ —á–∞—Ç–µ {chat_id} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
                        )
                    elif (now < start or now >= end) and settings['is_spamming']:
                        settings['is_spamming'] = False
                        await bot_instance.send_message(
                            chat_id=ADMIN_ID,
                            text=f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —á–∞—Ç–µ {chat_id} –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
                        )
            await asyncio.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ check_schedule: {e}")
            await asyncio.sleep(60)

async def periodic_chat_validation():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–æ–≤"""
    while True:
        await asyncio.sleep(3600)
        await validate_saved_chats()

async def validate_saved_chats():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ"""
    global active_chats
    if not active_chats:
        return

    unavailable_chats = []
    available_count = 0

    for chat_id in list(active_chats.keys()):
        try:
            await bot_instance.get_chat(chat_id)
            available_count += 1
        except Exception as e:
            if "bot is not a member" in str(e):
                logger.warning(f"‚ö† –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ {chat_id}")
            else:
                logger.warning(f"‚ö† –ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            unavailable_chats.append(chat_id)

    for chat_id in unavailable_chats:
        del active_chats[chat_id]

    if unavailable_chats:
        save_chats()
        await bot_instance.send_message(
            chat_id=ADMIN_ID,
            text=f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                 f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}\n"
                 f"‚ùå –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {len(unavailable_chats)}"
        )
    else:
        await bot_instance.send_message(
            chat_id=ADMIN_ID,
            text=f"‚úÖ –í—Å–µ {available_count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã!"
        )

async def send_spam_messages(chat_id: int):
    global bot_instance
    while chat_id in active_chats and active_chats[chat_id]['is_spamming']:
        try:
            await bot_instance.send_message(
                chat_id=chat_id,
                text=active_chats[chat_id]['message']
            )
            await asyncio.sleep(active_chats[chat_id]['interval'])
        except Exception as e:
            if "bot is not a member" in str(e):
                if chat_id in active_chats:
                    del active_chats[chat_id]
                    save_chats()
                await bot_instance.send_message(
                    chat_id=ADMIN_ID,
                    text=f"‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞ {chat_id} –∏ –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö."
                )
                break
            else:
                await bot_instance.send_message(
                    chat_id=ADMIN_ID,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}: {str(e)}"
                )
                active_chats[chat_id]['is_spamming'] = False
                break

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        message_text = ("üì£ Advance Posts - –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
                       "‚öô –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:")

        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            image_path = 'attached_assets/image_1752928390698.png'
            if os.path.exists(image_path):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG
                converted_image = convert_image_to_jpeg(image_path)
                if converted_image:
                    await update.message.reply_photo(
                        photo=converted_image,
                        caption=message_text,
                        reply_markup=main_keyboard()
                    )
                else:
                    raise Exception("Image conversion failed")
            else:
                logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                raise Exception("Image file not found")
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            await update.message.reply_text(
                message_text,
                reply_markup=main_keyboard()
            )
    else:
        await send_ad_to_non_admins(update)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'chat_list':
        if not active_chats:
            try:
                if query.message.photo:
                    await query.delete_message()
                    await bot_instance.send_message(
                        chat_id=query.from_user.id,
                        text="üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
                        ])
                    )
                else:
                    await query.edit_message_text(
                        "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
                        ])
                    )
            except:
                await query.delete_message()
                await bot_instance.send_message(
                    chat_id=query.from_user.id,
                    text="üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
                    ])
                )
        else:
            keyboard = await chat_list_keyboard()
            try:
                if query.message.photo:
                    await query.delete_message()
                    await bot_instance.send_message(
                        chat_id=query.from_user.id,
                        text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (üöÄ=—Ç—É—Ä–±–æ, ü•∑=—Å–∫—Ä—ã—Ç—ã–π):",
                        reply_markup=keyboard
                    )
                else:
                    await query.edit_message_text(
                        "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (üöÄ=—Ç—É—Ä–±–æ, ü•∑=—Å–∫—Ä—ã—Ç—ã–π):",
                        reply_markup=keyboard
                    )
            except:
                await query.delete_message()
                await bot_instance.send_message(
                    chat_id=query.from_user.id,
                    text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (üöÄ=—Ç—É—Ä–±–æ, ü•∑=—Å–∫—Ä—ã—Ç—ã–π):",
                    reply_markup=keyboard
                )

    elif query.data == 'quick_commands':
        try:
            if query.message.photo:
                await query.delete_message()
                await bot_instance.send_message(
                    chat_id=query.from_user.id,
                    text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                    reply_markup=quick_commands_keyboard()
                )
            else:
                await query.edit_message_text(
                    "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                    reply_markup=quick_commands_keyboard()
                )
        except:
            await query.delete_message()
            await bot_instance.send_message(
                chat_id=query.from_user.id,
                text="‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                reply_markup=quick_commands_keyboard()
            )

    elif query.data == 'schedule_menu':
        try:
            if query.message.photo:
                await query.delete_message()
                await bot_instance.send_message(
                    chat_id=query.from_user.id,
                    text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                    reply_markup=schedule_keyboard()
                )
            else:
                await query.edit_message_text(
                    "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                    reply_markup=schedule_keyboard()
                )
        except:
            await query.delete_message()
            await bot_instance.send_message(
                chat_id=query.from_user.id,
                text="‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:",
                reply_markup=schedule_keyboard()
            )

    elif query.data == 'add_chat_link':
        context.user_data['awaiting'] = 'chat_link'
        try:
            if query.message.photo:
                await query.delete_message()
                await bot_instance.send_message(
                    chat_id=query.from_user.id,
                    text="üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç (—Ñ–æ—Ä–º–∞—Ç: @username –∏–ª–∏ https://t.me/...):",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back')]
                    ])
                )
            else:
                await query.edit_message_text(
                    "üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç (—Ñ–æ—Ä–º–∞—Ç: @username –∏–ª–∏ https://t.me/...):",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back')]
                    ])
                )
        except:
            await query.delete_message()
            await bot_instance.send_message(
                chat_id=query.from_user.id,
                text="üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç (—Ñ–æ—Ä–º–∞—Ç: @username –∏–ª–∏ https://t.me/...):",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='back')]
                ])
            )

    elif query.data.startswith('chat_'):
        chat_id = int(query.data.split('_')[1])
        await query.edit_message_text(
            f"‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id}:",
            reply_markup=chat_settings_keyboard(chat_id)
        )

    elif query.data.startswith('leave_chat_'):
        chat_id = int(query.data.split('_')[2])
        try:
            await bot_instance.leave_chat(chat_id)
            if chat_id in active_chats:
                del active_chats[chat_id]
                save_chats()
            await query.edit_message_text(
                f"‚úÖ –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat_id}",
                reply_markup=main_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞: {str(e)}",
                reply_markup=chat_settings_keyboard(chat_id)
            )

    elif query.data.startswith('setmsg_'):
        chat_id = int(query.data.split('_')[1])
        context.user_data['awaiting'] = 'message'
        context.user_data['editing_chat'] = chat_id
        await query.edit_message_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'chat_{chat_id}')]
            ])
        )

    elif query.data.startswith('togglemode_'):
        chat_id = int(query.data.split('_')[1])
        if chat_id not in active_chats:
            await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_keyboard())
            return
        current_mode = active_chats[chat_id]['mode']
        new_mode = 'stealth' if current_mode == 'turbo' else 'turbo'
        active_chats[chat_id]['mode'] = new_mode
        active_chats[chat_id]['interval'] = 1 if new_mode == 'turbo' else 10
        save_chats()
        await query.edit_message_text(
            f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'üöÄ Turbo' if new_mode == 'turbo' else 'ü•∑ Stealth'}",
            reply_markup=chat_settings_keyboard(chat_id)
        )

    elif query.data.startswith('setinterval_'):
        _, chat_id, interval = query.data.split('_')
        chat_id = int(chat_id)
        interval = int(interval)
        if chat_id not in active_chats:
            await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_keyboard())
            return
        active_chats[chat_id]['interval'] = interval
        save_chats()
        await query.edit_message_text(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {interval} —Å–µ–∫",
            reply_markup=chat_settings_keyboard(chat_id)
        )

    elif query.data.startswith('schedule_'):
        chat_id = int(query.data.split('_')[1])
        await query.edit_message_text(
            f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}:",
            reply_markup=schedule_keyboard(chat_id)
        )

    elif query.data.startswith('set_start_'):
        chat_id = int(query.data.split('_')[2])
        context.user_data['awaiting'] = 'start_time'
        context.user_data['editing_chat'] = chat_id
        await query.edit_message_text(
            f"üïò –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} (HH:MM):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'schedule_{chat_id}')]
            ])
        )

    elif query.data.startswith('set_end_'):
        chat_id = int(query.data.split('_')[2])
        context.user_data['awaiting'] = 'end_time'
        context.user_data['editing_chat'] = chat_id
        await query.edit_message_text(
            f"üïò –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} (HH:MM):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'schedule_{chat_id}')]
            ])
        )

    elif query.data.startswith('enable_schedule_'):
        chat_id = int(query.data.split('_')[2])
        if chat_id not in active_chats:
            await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_keyboard())
            return
        active_chats[chat_id]['schedule']['enabled'] = True
        save_chats()
        await query.edit_message_text(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}",
            reply_markup=schedule_keyboard(chat_id)
        )

    elif query.data.startswith('disable_schedule_'):
        chat_id = int(query.data.split('_')[2])
        if chat_id not in active_chats:
            await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_keyboard())
            return
        active_chats[chat_id]['schedule']['enabled'] = False
        save_chats()
        await query.edit_message_text(
            f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}",
            reply_markup=schedule_keyboard(chat_id)
        )

    elif query.data.startswith('togglespam_'):
        chat_id = int(query.data.split('_')[1])
        if chat_id not in active_chats:
            await query.edit_message_text("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=main_keyboard())
            return
        active_chats[chat_id]['is_spamming'] = not active_chats[chat_id]['is_spamming']

        if active_chats[chat_id]['is_spamming']:
            asyncio.create_task(send_spam_messages(chat_id))

        await query.edit_message_text(
            f"‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ {chat_id}",
            reply_markup=chat_settings_keyboard(chat_id)
        )

    elif query.data == 'turbo_all':
        for chat_id in active_chats:
            active_chats[chat_id]['mode'] = 'turbo'
            active_chats[chat_id]['interval'] = 1
        save_chats()
        await query.edit_message_text(
            "‚úÖ –í–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º üöÄ Turbo (1 —Å–µ–∫)",
            reply_markup=quick_commands_keyboard()
        )

    elif query.data == 'stealth_all':
        for chat_id in active_chats:
            active_chats[chat_id]['mode'] = 'stealth'
            active_chats[chat_id]['interval'] = 10
        save_chats()
        await query.edit_message_text(
            "‚úÖ –í–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º ü•∑ Stealth (10 —Å–µ–∫)",
            reply_markup=quick_commands_keyboard()
        )

    elif query.data == 'start_all':
        for chat_id in active_chats:
            active_chats[chat_id]['is_spamming'] = True
            asyncio.create_task(send_spam_messages(chat_id))
        await query.edit_message_text(
            "üöÄ –°–ø–∞–º –∑–∞–ø—É—â–µ–Ω –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö!",
            reply_markup=quick_commands_keyboard()
        )

    elif query.data == 'stop_all':
        for chat_id in active_chats:
            active_chats[chat_id]['is_spamming'] = False
        await query.edit_message_text(
            "üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö.",
            reply_markup=quick_commands_keyboard()
        )

    elif query.data == 'back':
        try:
            await query.delete_message()
        except:
            pass

        message_text = ("üì£ Advance Posts - –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
                       "‚öô –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º:")

        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            image_path = 'attached_assets/image_1752928390698.png'
            if os.path.exists(image_path):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JPEG
                converted_image = convert_image_to_jpeg(image_path)
                if converted_image:
                    await bot_instance.send_photo(
                        chat_id=query.from_user.id,
                        photo=converted_image,
                        caption=message_text,
                        reply_markup=main_keyboard()
                    )
                else:
                    raise Exception("Image conversion failed")
            else:
                logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                raise Exception("Image file not found")
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
            await bot_instance.send_message(
                chat_id=query.from_user.id,
                text=message_text,
                reply_markup=main_keyboard()
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await send_ad_to_non_admins(update)
        return

    if 'awaiting' in context.user_data:
        if context.user_data['awaiting'] == 'chat_link':
            link = update.message.text.strip()

            if link.startswith('@'):
                link = f"https://t.me/{link[1:]}"
            elif not link.startswith('http'):
                link = f"https://t.me/{link}"

            with join_lock:
                pending_invites.append(link)

            await update.message.reply_text(
                "‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ë–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=main_keyboard()
            )
            del context.user_data['awaiting']

        elif context.user_data['awaiting'] == 'message' and 'editing_chat' in context.user_data:
            chat_id = context.user_data['editing_chat']
            new_message = update.message.text
            active_chats[chat_id]['message'] = new_message
            save_chats()
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n{new_message}",
                reply_markup=chat_settings_keyboard(chat_id)
            )
            del context.user_data['awaiting']
            del context.user_data['editing_chat']

        elif context.user_data['awaiting'] in ['start_time', 'end_time'] and 'editing_chat' in context.user_data:
            chat_id = context.user_data['editing_chat']
            text = update.message.text
            try:
                datetime.strptime(text, "%H:%M")
                time_type = context.user_data['awaiting'].split('_')[0]
                active_chats[chat_id]['schedule'][time_type] = text
                save_chats()
                await update.message.reply_text(
                    f"‚úÖ –í—Ä–µ–º—è {time_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {text}",
                    reply_markup=schedule_keyboard(chat_id)
                )
                del context.user_data['awaiting']
                del context.user_data['editing_chat']
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")

async def new_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.bot.id in [user.id for user in update.message.new_chat_members]:
        chat_id = update.effective_chat.id
        if chat_id not in active_chats:
            active_chats[chat_id] = {
                'mode': 'stealth',
                'interval': 10,
                'is_spamming': False,
                'message': f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {update.effective_chat.title or chat_id}",
                'schedule': {
                    'start': '09:00',
                    'end': '18:00',
                    'enabled': False
                }
            }
            save_chats()

            quick_manage_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚öô –£–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —á–∞—Ç–æ–º", callback_data=f'chat_{chat_id}')],
                [InlineKeyboardButton("üìã –í—Å–µ —á–∞—Ç—ã", callback_data='chat_list')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]
            ])

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"ü§ñ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç!\n\n"
                     f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {update.effective_chat.title or '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}\n"
                     f"üÜî ID: {chat_id}\n\n"
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=quick_manage_keyboard
            )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    if update and update.effective_user:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(context.error)[:500]}"
            )
        except:
            pass

async def main():
    global bot_instance

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    bot_instance = Bot(TOKEN)

    load_chats()
    await validate_saved_chats()

    asyncio.create_task(check_schedule())
    asyncio.create_task(process_invites())
    asyncio.create_task(periodic_chat_validation())

    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_chat_member))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    await application.initialize()
    await application.start()
    await application.updater.start_polling(drop_pending_updates=True)

    try:
        await asyncio.sleep(float('inf'))
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await application.updater.stop()
        await application.stop()
        await application.shutdown()

if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(main())
        loop.run_forever()
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
